package com.imposter.mockimposter.service;

import com.imposter.mockimposter.entities.User; // Votre entité User
import com.imposter.mockimposter.repositories.UserRepository; // Votre repository
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.core.userdetails.User.UserBuilder;
import org.springframework.stereotype.Service;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final UserRepository userRepository;

    public CustomUserDetailsService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        System.out.println("🔍 Tentative de chargement pour : " + username);

        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found: " + username));

        System.out.println("✅ Utilisateur trouvé en DB : " + user.getUsername());
        System.out.println("🔑 Hash du mot de passe : " + user.getPassword().substring(0, 10) + "...");

        // Construire UserDetails avec le mot de passe hashé de la DB
        UserBuilder builder = org.springframework.security.core.userdetails.User.withUsername(username);
        builder.password(user.getPassword()); // Mot de passe hashé depuis la DB
        builder.authorities("USER"); // ou les rôles de votre utilisateur

        return builder.build();
    }
}